# Limpa ambiente de trabalho.
rm(list = ls())
# Pacotes.
library(lattice)      # Gráficos.
library(latticeExtra)
library(RColorBrewer) # Esquemas de cores.
library(plyr)         # Manipulação de dados.
# https://www.shanelynn.ie/massive-geocoding-with-r-and-google-maps/
library(ggmap)        # CEP para lat & lon.
install.packages("ggmap")
# https://www.shanelynn.ie/massive-geocoding-with-r-and-google-maps/
library(ggmap)        # CEP para lat & lon.
# https://rstudio.github.io/leaflet/
library(leaflet)      # Gráficos interativos.
install.packages("leaflet")
# https://rstudio.github.io/leaflet/
library(leaflet)      # Gráficos interativos.
mycol <- c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33")
# Trellis graphical style.
ps <- list(box.rectangle = list(col = 1, fill = c("gray70")),
box.umbrella = list(col = 1, lty = 1),
dot.symbol = list(col = 1, pch = 19),
dot.line = list(col = "gray50", lty = 3),
plot.symbol = list(col = 19, cex = 0.8),
plot.line = list(col = 1),
plot.polygon = list(col = "gray50"),
superpose.line = list(col = mycol, lty = 1),
superpose.symbol = list(col = mycol, pch = 19, fill = mycol),
superpose.region = list(col = mycol, pch = 19),
superpose.polygon = list(col = mycol),
strip.background = list(col = c("gray80", "gray50")),
axis.text = list(cex = 0.8))
trellis.par.set(ps)
# lattice.options(default.args = list(as.table = TRUE))
# show.settings()
# Exibe os arquivos no diretório de trabalho.
list.files()
# Importa a tabela.
nef <- read.csv2(file = "baseSIAOK.csv",
header = TRUE,
sep = ",",
stringsAsFactors = FALSE)
# Importa a tabela.
nef <- read.csv2(file = "baseSIAOK.csv",
header = TRUE,
sep = ",",
stringsAsFactors = FALSE)
str(nef)
cat("Dimensões da tabela.\n")
dim(nef)
cat("Nome das colunas (variáveis).\n")
names(nef)
```{r, results = "hide", fig.show = "hide"}
barchart(sort(table(nef$AP_UFMUN),
decreasing = FALSE),
xlab = "Número de atendimentos",
ylab = "Código do município") +
latticeExtra::layer(panel.abline(v = seq(0, max(x), by = 1000),
col = "gray70"),
under = TRUE)
# Dimensões depois de filtrar.
dim(nef)
# Frequencias de dados ausentes.
table(is.na(nef$AP_CEPPCN))
# Dimensões depois de filtrar.
dim(nef)
# Número de digitos do CEP.
table(nchar(nef$AP_CEPPCN))
# Formatando os CEPs para fazer a busca na API do Google.
cep <- gsub(x = nef$AP_CEPPCN,
pattern = "(\\d{2})(\\d{3})(\\d{3})",
replacement = "\\1.\\2-\\3")
cep <- sprintf("CEP %s", cep)
# Quantidade de CEPs únicos e duplicados.
table(duplicated(cep))
latlon <- geocode(location = cep)
# Para recortar e colar no RStudio Web do LEG: rstudio.leg.ufpr.br.
# Com servidor do LEG a conexão com Google é mais rápida.
# dput(unique(cep))
length(cep)
# Quantidade de CEPs únicos e duplicados.
table(duplicated(cep))
# Para recortar e colar no RStudio Web do LEG: rstudio.leg.ufpr.br.
# Com servidor do LEG a conexão com Google é mais rápida.
dput(unique(cep))
length(cep)
latlon <- geocode(location = cep)
latlon <- geocode(location = cep[1:2])
str(latlon)
# Quantidade de CEPs únicos e duplicados.
table(duplicated(cep))
duplicated(cep)
# Quantidade de CEPs únicos e duplicados.
table(duplicated(cep))
cep[duplicated(cep) == FALSE]
len(cep[duplicated(cep) == FALSE])
length(cep[duplicated(cep) == FALSE])
cep <- cep[duplicated(cep) == FALSE]
# Para recortar e colar no RStudio Web do LEG: rstudio.leg.ufpr.br.
# Com servidor do LEG a conexão com Google é mais rápida.
dput(unique(cep))
#-----------------------------------------------------------------------
# Limpa ambiente de trabalho.
rm(list = ls())
# Pacotes.
library(lattice)      # Gráficos.
library(latticeExtra)
library(RColorBrewer) # Esquemas de cores.
library(plyr)         # Manipulação de dados.
# https://www.shanelynn.ie/massive-geocoding-with-r-and-google-maps/
library(ggmap)        # CEP para lat & lon.
# https://rstudio.github.io/leaflet/
library(leaflet)      # Gráficos interativos.
#-----------------------------------------------------------------------
# Configurações da lattice.
mycol <- c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33")
# Trellis graphical style.
ps <- list(box.rectangle = list(col = 1, fill = c("gray70")),
box.umbrella = list(col = 1, lty = 1),
dot.symbol = list(col = 1, pch = 19),
dot.line = list(col = "gray50", lty = 3),
plot.symbol = list(col = 19, cex = 0.8),
plot.line = list(col = 1),
plot.polygon = list(col = "gray50"),
superpose.line = list(col = mycol, lty = 1),
superpose.symbol = list(col = mycol, pch = 19, fill = mycol),
superpose.region = list(col = mycol, pch = 19),
superpose.polygon = list(col = mycol),
strip.background = list(col = c("gray80", "gray50")),
axis.text = list(cex = 0.8))
trellis.par.set(ps)
# lattice.options(default.args = list(as.table = TRUE))
# show.settings()
#-----------------------------------------------------------------------
# Importa dados de hemodialise.
# save.image("seguranca.RData")
# Exibe os arquivos no diretório de trabalho.
list.files()
# Importa a tabela.
nef <- read.csv2(file = "baseSIAOK.csv",
header = TRUE,
sep = ",",
stringsAsFactors = FALSE)
str(nef)
cat("Dimensões da tabela.\n")
dim(nef)
cat("Nome das colunas (variáveis).\n")
names(nef)
cat("Dimensões da tabela.\n")
dim(nef)
cat("Nome das colunas (variáveis).\n")
names(nef)
#-----------------------------------------------------------------------
# Gráfico de pareto do número de ocorrências por MUN.
barchart(sort(table(nef$AP_UFMUN),
decreasing = FALSE),
xlab = "Número de atendimentos",
ylab = "Código do município") +
latticeExtra::layer(panel.abline(v = seq(0, max(x), by = 1000),
col = "gray70"),
under = TRUE)
# Códigos para filtrar os registros de Curitiba.
#mun <- c(Curitiba = "410690")
# Aplicando o filtro.
#nef <- subset(nef, AP_UFMUN %in% mun)
# Dimensões depois de filtrar.
dim(nef)
# Frequencias de dados ausentes.
table(is.na(nef$AP_CEPPCN))
# Número de digitos do CEP.
table(nchar(nef$AP_CEPPCN))
# Formatando os CEPs para fazer a busca na API do Google.
cep <- gsub(x = nef$AP_CEPPCN,
pattern = "(\\d{2})(\\d{3})(\\d{3})",
replacement = "\\1.\\2-\\3")
cep <- sprintf("CEP %s", cep)
# Quantidade de CEPs únicos e duplicados.
table(duplicated(cep))
# Para recortar e colar no RStudio Web do LEG: rstudio.leg.ufpr.br.
# Com servidor do LEG a conexão com Google é mais rápida.
dput(unique(cep))
# Para recortar e colar no RStudio Web do LEG: rstudio.leg.ufpr.br.
# Com servidor do LEG a conexão com Google é mais rápida.
dput(unique(cep))
# Para recortar e colar no RStudio Web do LEG: rstudio.leg.ufpr.br.
# Com servidor do LEG a conexão com Google é mais rápida.
length(dput(unique(cep)))
# Para recortar e colar no RStudio Web do LEG: rstudio.leg.ufpr.br.
# Com servidor do LEG a conexão com Google é mais rápida.
cep <- dput(unique(cep))
length(cep)
latlon <- geocode(location = cep[1:2500])
str(latlon)
latlon
View(latlon)
str(latlon)
latlon
str(latlon)
View(latlon)
latlon1 <- dd(location = cep[2500:4296])
latlon1 <- dd(location = cep[2500:4296])
save.image("~/Área de Trabalho/Stats4Health/first.RData")
# https://www.shanelynn.ie/massive-geocoding-with-r-and-google-maps/
library(ggmap)        # CEP para lat & lon.
# https://rstudio.github.io/leaflet/
library(leaflet)      # Gráficos interativos.
latlon1 <- dd(location = cep[2500:4296])
cep[2500:4296]
latlon <- dd(location = cep[1:2500])
#-----------------------------------------------------------------------
# Limpa ambiente de trabalho.
rm(list = ls())
# Pacotes.
library(lattice)      # Gráficos.
library(latticeExtra)
library(RColorBrewer) # Esquemas de cores.
library(plyr)         # Manipulação de dados.
# https://www.shanelynn.ie/massive-geocoding-with-r-and-google-maps/
library(ggmap)        # CEP para lat & lon.
# https://rstudio.github.io/leaflet/
library(leaflet)      # Gráficos interativos.
#-----------------------------------------------------------------------
# Configurações da lattice.
mycol <- c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33")
# Trellis graphical style.
ps <- list(box.rectangle = list(col = 1, fill = c("gray70")),
box.umbrella = list(col = 1, lty = 1),
dot.symbol = list(col = 1, pch = 19),
dot.line = list(col = "gray50", lty = 3),
plot.symbol = list(col = 19, cex = 0.8),
plot.line = list(col = 1),
plot.polygon = list(col = "gray50"),
superpose.line = list(col = mycol, lty = 1),
superpose.symbol = list(col = mycol, pch = 19, fill = mycol),
superpose.region = list(col = mycol, pch = 19),
superpose.polygon = list(col = mycol),
strip.background = list(col = c("gray80", "gray50")),
axis.text = list(cex = 0.8))
trellis.par.set(ps)
# lattice.options(default.args = list(as.table = TRUE))
# show.settings()
#-----------------------------------------------------------------------
# Importa dados de hemodialise.
# save.image("seguranca.RData")
# Exibe os arquivos no diretório de trabalho.
list.files()
# Importa a tabela.
nef <- read.csv2(file = "baseSIAOK.csv",
header = TRUE,
sep = ",",
stringsAsFactors = FALSE)
str(nef)
cat("Dimensões da tabela.\n")
dim(nef)
cat("Nome das colunas (variáveis).\n")
names(nef)
#-----------------------------------------------------------------------
# Gráfico de pareto do número de ocorrências por MUN.
barchart(sort(table(nef$AP_UFMUN),
decreasing = FALSE),
xlab = "Número de atendimentos",
ylab = "Código do município") +
latticeExtra::layer(panel.abline(v = seq(0, max(x), by = 1000),
col = "gray70"),
under = TRUE)
# Códigos para filtrar os registros de Curitiba.
#mun <- c(Curitiba = "410690")
# Aplicando o filtro.
#nef <- subset(nef, AP_UFMUN %in% mun)
# Dimensões depois de filtrar.
dim(nef)
# Frequencias de dados ausentes.
table(is.na(nef$AP_CEPPCN))
# Número de digitos do CEP.
table(nchar(nef$AP_CEPPCN))
# Formatando os CEPs para fazer a busca na API do Google.
cep <- gsub(x = nef$AP_CEPPCN,
pattern = "(\\d{2})(\\d{3})(\\d{3})",
replacement = "\\1.\\2-\\3")
cep <- sprintf("CEP %s", cep)
# Quantidade de CEPs únicos e duplicados.
table(duplicated(cep))
# Para recortar e colar no RStudio Web do LEG: rstudio.leg.ufpr.br.
# Com servidor do LEG a conexão com Google é mais rápida.
cep <- dput(unique(cep))
length(cep)
#latlon <- dd(location = cep[1:2500])
latlon1 <- dd(location = cep[2500:4296])
